<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>
/************************************* 地图类型定义 *************************************/

/**  
    Road的结构体

    elementType = 1        表示Road类型
    roadId                 唯一标识一条Road
    junctionId             junction的id 表示当前Road在哪一个junction中作为连接路   -1表示不是连接路 不属于任何一条junction
    junctionIndex          索引值 用于在junction数组中索引
    length                 路的总长度
    predecessorElementType predecessor的类型 根据这个类型 在不同的数组中进行索引
    predecessorIndex       索引值 表示当前Road的前继 可以是Road 也可以是一个junction  需要配合predecessorElementType在对应的类型数组中索引    用-1表示空
    successorElementType   successor的类型 根据这个类型 在不同的数组中进行索引
    successorIndex         索引值 表示当前Road的后继 可以是Road 也可以是一个junction  需要配合successorElementType在对应的类型数组中索引    用-1表示空
    maxSpeed               路的最大限速索引 根据这个索引可以在roadMaxSpeeds数组中找到路的最大限速
    laneSections[]         表示当前Road中的道路段索引数组  道路段的顺序就是数组的顺序   道路段中又有很多不同的道路Lane
**/
typedef struct {
    int elementType;
    int roadId;
    int junctionIndex;
    int junctionId;
    int length;
    int predecessorElementType;
    int predecessorIndex;
    int successorElementType;
    int successorIndex;
    int maxSpeed;
    int laneSections[10];
}Road;

/**
    LaneSection结构体
    
    elementType = 2          表示LaneSection类型
    roadIndex                索引值 表示当前LaneSection属于那一条道路 可以在roads数组中查找 
    roadId                   唯一标志当前LaneSection所属Road
    LaneSectionId            唯一标志一个LaneSection
    startPosition            起始偏移位置索引值  可以在startPositions数组中找到当前LaneSection是距离Road起始位置多少m开始
    lanes                    LaneSection的道路Lane的索引值列表
    length                   LaneSection长度索引值  可以在laneSectionLengths数组中找到道路段长度
**/
typedef struct {
    int elementType;
    int roadIndex;
    int roadId;
    int laneSectionId;
    int startPosition;
    int lanes[10];
    int length;
}LaneSection;

/**
    Lane结构体
    
    elementType = 3          表示Lane类型
    roadId                   当前Lane所属Road的id
    roadIndex                当前Lane所属Road的索引值
    laneSectionIndex         当前Lane所属LaneSection的索引值
    laneId                   标志当前Lane在LaneSection中的相对位置 中心线为0 左边的道路id依次递增 右边的道路id依次递减
    type                     表示当前lane是什么类型 1表示driving
    predecessorIndex         前继Lane的索引值
    successorIndex           后继Lane的索引值
    laneChange               int类型 由于车道从右到左id递增 用该变量表示当前lane是否允许变道 -1表示不知道 1表示允许向左变道 2表示允许向右变道 3表示两边都允许 4表示两边都不允许
    
**/
typedef struct{
    int elementType;
    int roadId;
    int roadIndex;
    int laneSectionIndex;
    int laneId;
    int type;
    int predecessorIndex;
    int successorIndex;
    int laneChange;
}Lane;

/**
    Junction结构体
    
    elementType = 4          表示Junction类型
    junctionId               唯一标志一个junction
    connections[]            Connection结构体数组 表示当前junction连接的 incomingRoad 和 connectingRoad
    
**/
typedef struct {
    int elementType;
    int junctionId;
    int connections[10];
}Junction;

/**
    Connection结构体
        
    incomingRoadId          驶入Road的id  
    connectingRoadId        驶出Road的id
    incomingRoadIndex       索引值 表示当前Connection连接的驶入Road
    connectingRoadIndex     索引值 表示当前Connection连接Road
    laneLinks               LaneLink结构体数组 表示当前连接Road的Lane 连接 驶入Road的Lane 的信息
**/
typedef struct {
    int incomingRoadId;
    int connectingRoadId;
    int incomingRoadIndex;
    int connectingRoadIndex;
    int laneLinks[10];
}Connection;

/**
    LaneLink结构体
        
    from                    表示当前LaneLink连接的 驶入lane的下标索引
    to                      表示当前LaneLink连接的 驶出lane的下标索引
    laneLinks               表示当前连接Road的Lane 连接 驶入Road的Lane的信息
**/
typedef struct {
    int from;
    int to;
} LaneLink;

/************************************* 车辆类型定义 *************************************/

typedef struct {
    //车的静态信息: id编号, 宽度, 长度
    int id;
    int width;
    int length;

    //车的动态信息: 朝向, 速度, 加速度, 最大速度
    bool heading;
    int speed;
    int acceleration;
    int maxSpeed;

    //车的车道信息: 所在road, laneSection, lane及在road和lane上的偏移量
    int roadId;
    int laneSectionId;
    int laneId;
    int roadIndex;
    int laneSectionIndex;
    int laneIndex;
    int roadOffset;
    int laneOffset;

    //为了初始化简便, 可以将carId和后面所有的Index设置为同一个, 按序号来, 找索引时直接使用carId
}Car;

/************************************* 变量和数据 *************************************/
/**
    time                         时钟
    TIME_STEP                     时间步长

    MIN_DISTANCE_TO_OVERTAKE     超车的最小距离
    MIN_DISTANCE_TO_CLOSE        两车最小的距离
**/
clock time;
chan update, end;

const int MIN_DISTANCE_TO_OVERTAKE = 300;
const int MIN_DISTANCE_TO_CLOSE = 200;

// 函数中不能声明结构体，在这里临时声明一个
Lane tempLane;

Road roads[1000];
LaneSection laneSections[1000];
Lane lanes[1000];
Junction junctions[1000];
Connection connections[1000];
LaneLink laneLinks[1000];

const int TIME_STEP = 10;
//id, width, length, heading, speed, acceleration, maxSpeed, ..., minOffset, maxOffset
Car car[1] = {{0, 15, 25, true, 10, 0, 100, 1, 0, 0, 0, 0, 0, 0, 200}};
/************************************* 车辆查询方法 *************************************/

/**
	车的前驱lane
**/
int preLaneIndex(Lane lane){
    return lane.predecessorIndex;
}

/**
  	车的后继lane
**/
int sucLaneIndex(Lane lane){
	return lane.successorIndex;
}

/**
   	车的左侧lane:
   	0. 根据laneId的性质来写: 中心线为0 左边的道路id依次递增 右边的道路id依次递减
   	1. 在同一laneSection中, 若某个laneId1与当前laneId2差为1, 或laneId关系为中心线左右两侧(即1, -1), 则该lane为当前左侧lane
**/
int leftLaneIndex(Lane lane){
    int i;
	for(i=0; i&lt;10; i++) {
        int index = laneSections[roads[lane.roadIndex].laneSections[lane.laneSectionIndex]].lanes[i];
        tempLane = lanes[index];
        if(tempLane.laneId - lane.laneId == 1 || (tempLane.laneId - lane.laneId == 2 &amp;&amp; lane.laneId == -1)) {
            return index;
        }
    }
    return -1;
}

/**
   	车的右侧lane:
   	0. 同上; 若差值为-1, 则该lane为当前右侧lane
**/
int rightLaneIndex(Lane lane){
    int i;
    for(i=0; i&lt;10; i++) {
        int index = laneSections[roads[lane.roadIndex].laneSections[lane.laneSectionIndex]].lanes[i];
        tempLane = lanes[index];
        if(tempLane.laneId - lane.laneId == -1 || (tempLane.laneId - lane.laneId == -2 &amp;&amp; lane.laneId == 1)) {
            return index;
        }
    }
    return -1;
}

/************************************* 地图查询方法 *************************************/

/**
   road的前驱类型, 返回elementType
**/
int preRoadType(Road road){
	return road.predecessorElementType;
}

/**
   road的后继类型, 返回elementType
**/
int sucRoadType(Road road){
	return road.successorElementType;
}

/**
   road的前驱, 返回road或者junction的索引
**/
int preRoadIndex(Road road){
    return road.predecessorIndex;
}

/**
   road的后继, 返回road或者junction的索引
**/
int sucRoadIndex(Road road){
	return road.successorIndex;
}

/**
   laneSection的前驱: 可根据lane的前驱计算
**/
int preLaneSectionIndex(LaneSection laneSection){
    return lanes[preLaneIndex(lanes[laneSection.lanes[0]])].laneSectionIndex;
}

/**
   laneSection的后继: 同上
**/
int sucLaneSectionIndex(LaneSection laneSection){
    return lanes[sucLaneIndex(lanes[laneSection.lanes[0]])].laneSectionIndex;
}


/************************************* 行为实现 *************************************/

/**
    车的一些属性:
    - int roadId            	当前所在road的id
    - int laneSectionId			当前所在laneSection的id
    - int laneId            	当前所在lane的id
    - int offset				车辆在当前lane上的位置
    - int speed             	当前速度大小
    - int acceleration        	当前加速度(包含方向)

    全局的属性:
    - double timestep 			设置的时间步长
    - clock time				时钟
**/


/**
	辅助函数:
	accelerate_s	匀加速直线运动位移公式; 加速度a为负代表减速
	accelerate_v 	匀加速直线运动速度公式
	modifyRoadLane 	运动一段时间后可能改变了road和lane信息, 这时根据偏移修改
**/
int accelerate_s(int v, int a, int t) {
    return v*t/10 +   a * t * t/200;
}

int accelerate_v(int v, int a, int t) {
    return v + a * t/10;
}

void modifyRoadLane(Car car) {
    // lane, laneSection: 若偏移大于laneSection长度, 即进入了下一lane和laneSection
    int lsLength = laneSections[car.laneSectionIndex].length;
    int rLength = roads[car.roadIndex].length;
    if(car.laneOffset &gt;= lsLength) {
        car.laneOffset -= lsLength;
        laneSections[car.laneSectionIndex] = laneSections[sucLaneSectionIndex(laneSections[car.laneSectionIndex])];
        car.laneIndex = sucLaneIndex(lanes[car.laneIndex]);
    }
    // road: 同理
    if(car.roadOffset &gt;= rLength) {
        car.roadOffset -= rLength;
        roads[car.roadIndex] = roads[sucRoadIndex(roads[car.roadIndex])];
    }
}

/**
	加速:
	1. 根据加速度公式v'=v+at计算速度: speed += timestep * accelation? 同时需要判断是否到达最大车速
	2. 根据位移公式x=vt+0.5at^2计算移动距离(需根据是否到达最大速度计算): movement = speed * timestep + 0.5 * accelation * timestep * timestep
    3. 判断是否驶出当前车道, 修改road和lane信息并计算偏移: offset += movement?
**/
void speedUp(Car&amp; car, int targetSpeed, int duration){
    int roadMaxSpeed = roads[car.roadIndex].maxSpeed;
    int carMaxSpeed = car.maxSpeed;
    int maxSpeed = (roadMaxSpeed &gt; carMaxSpeed? carMaxSpeed : roadMaxSpeed);

    int v1 = car.speed;
    int a = car.acceleration;
    int v2 = accelerate_v(v1, a, TIME_STEP);
    int t = 0;
    int movement = 0;

    maxSpeed = (maxSpeed &gt; targetSpeed? targetSpeed : maxSpeed);
    if(v2 &gt; maxSpeed) { //在时间段之前已经到达最大速度了, 后面保持匀速
		v2 = maxSpeed;
        t = (v2 - v1) / a; //加速时间
        movement = accelerate_s(v1, a, t) + v2 * (TIME_STEP - t) / 10;
    } else {
        movement = accelerate_s(v1, a, TIME_STEP);
    }

    car.speed = v2;
    car.roadOffset += movement;
    car.laneOffset += movement;
    modifyRoadLane(car);
}


/**
	减速:
    0. 与加速逻辑同理, 此时acclation大小为负
    1. 无需考虑是否到达最大速度, 应考虑速度是否变为0
**/
void speedDown(Car&amp; car, int targetSpeed, int duration){
    int v1 = car.speed;
    int a = car.acceleration;
    int v2 = accelerate_v(v1, a, TIME_STEP);
    int t = 0;
    int movement = 0;
    int minSpeed = (targetSpeed &gt; 0? targetSpeed : 0);

    if(v2 &lt; minSpeed) { //在时间段之前已经到达最大速度了, 后面保持匀速
		v2 = minSpeed;
        t = (v2 - v1) / a; //加速时间
        movement = accelerate_s(v1, a, t) + v2 * (TIME_STEP - t) / 10;
    } else {
        movement = accelerate_s(v1, a, TIME_STEP);
    }

    car.speed = v2;
    car.roadOffset += movement;
    car.laneOffset += movement;
    modifyRoadLane(car);
}

/**
	匀速:
    0. 可看作加速度为0的加速运动, 逻辑同上
    1. 无需考虑速度是否为0或达到最大, 只需考虑是否驶出当前lane和road
**/
void keep(Car car){
    int v = car.speed;
    int movement = v * TIME_STEP / 10;
    car.roadOffset += movement;
    car.laneOffset += movement;
    modifyRoadLane(car);
}

/**
    转到左车道:
    0. 可视为一个瞬时动作
    1. speed不变, road不变, lane变为其左侧lane; 若无?
    2. 设置一个因子k, 因为左转也会前进一部分, k代表左转道前进的路程占直接匀速前进路程的比例
    3. 若无法左转该?
**/
void changeToLeftLane(Car car){
    int k = 8;
    int v = car.speed;
    int movement = v * TIME_STEP * k / 100;
    car.roadOffset += movement;
    car.laneOffset += movement;
    if(lanes[car.laneIndex].laneChange == 1 || lanes[car.laneIndex].laneChange == 3) {
     	car.laneIndex = leftLaneIndex(lanes[car.laneIndex]);
    }
    modifyRoadLane(car);
}

/**
    转到右车道:
    0. 逻辑同上转到左车道
**/
void changeToRightLane(Car car){
    int k = 8;
    int v = car.speed;
    int movement = v * TIME_STEP * k / 100;
    car.roadOffset += movement;
    car.laneOffset += movement;
    if(lanes[car.laneIndex].laneChange == 2 || lanes[car.laneIndex].laneChange == 3) {
     	car.laneIndex = leftLaneIndex(lanes[car.laneIndex]);
    }
    modifyRoadLane(car);
}

/**
    左转:
    0. 视为一个瞬时动作
    1. speed不变, road和lane都变为左转后的; 若无?
**/
void turnLeft(){
    // 存疑, 暂未实现
}

/**
   右转:
   0. 逻辑同上左转
**/
void turnRight(){
    // 存疑, 暂未实现
}

/************************************* 常用函数 *************************************/

/**
   	获取两车的距离差:
   	两车在同一road比才有意义, 否则直接距离差视为无穷大
**/
int getDistance(Car car1, Car car2){
    int distance = car1.roadOffset - car2.roadOffset;
	if(car1.roadIndex == car2.roadIndex) {
        return distance;
    } else {
        return 9999999;
    }
}

	</declaration>
    <template>
        <name>timer</name>
        <location id="id3" x="-144" y="-8">
            <name x="-154" y="-42">Start</name>
            <label kind="invariant" x="-154" y="9">time &lt;= 1</label>
        </location>
        <location id="id4" x="144" y="-8">
            <name x="127" y="-42">End</name>
        </location>
        <init ref="id3"/>
        <transition>
            <source ref="id3"/>
            <target ref="id4"/>
            <label kind="synchronisation" x="-126" y="-25">end?</label>
        </transition>
        <transition>
            <source ref="id3"/>
            <target ref="id3"/>
            <label kind="guard" x="-245" y="-135">time == 1</label>
            <label kind="synchronisation" x="-245" y="-118">update!</label>
            <label kind="assignment" x="-245" y="-101">time = 0</label>
            <nail x="-272" y="-161"/>
            <nail x="-51" y="-161"/>
        </transition>
    </template>
	<template>
		<name>car1</name>
		<declaration>
/**
    三元组算法: 由树转化为自动机时，状态迁出时应走行为树对应的边，该算法用于判断相应的边
    (level,group,number)三元组用于标识自动机运行到达的边
    level:  表示边所在行为树的第几层
    group:  表示边所在层的第几棵子树
    number: 表示边所在子树的第几条

    Transition(实线)信息如下(虚线不需要Guard):
    Select -&gt; i:int[1,1], j:int[2,2], k:int[3,3]
    Guard  -&gt; level==i &amp;&amp; group==j
    Update -&gt; group=(group-1)*N+k, level=level+1, number=k
    其中，ijk的值在Java中已读取获得
**/
int level = 1;
int group = 1;
int number = 1;
int N = 3;

/**
    自循环加锁算法: 进入一个Location后，应先"完成行为"再迁出，该算法使用了锁，保证了流程的正确性
    (t, v, lock) 用于判断是否可以迁出
    t: 时间，用于计算是否达到一个行为的持续时间
    v: 速度，用于计算是否达到一个行为的目标速度
    lock: 锁，用于标识是否完成一个行为，完成时释放锁，lock=false；未完成则保留锁，lock=true
    1 迁入:
      Update -&gt; t=0, v=0, lock=true
    2 自循环:
      Guard  -&gt; t&lt;duration &amp;&amp; v&lt;target_speed &amp;&amp; lock
      Update -&gt; t=t+TIME_STEP, v据算法而定, lock=(duration&gt;=t||v&gt;=target_speed)
    3 迁出:
      Guard  -&gt; !lock
      Update -&gt; t=0, v=0, lock=true
**/
int v = 0;
int t = 0;
bool lock = true;
		</declaration>
		<location id="id0">
			<name>Start</name>
		</location>		<location id="id1" x="283.79999999999995" y="24.79999961853028">
			<name x="273.79999999999995" y="-9.20000038146972">Accelerate</name>
		</location>
		<location id="id2" x="208.60000305175788" y="253.59998779296876">
			<name x="198.60000305175788" y="219.59998779296876">ChangeRight</name>
		</location>
		<location id="id3" x="206.99999694824237" y="361.59999389648436">
			<name x="196.99999694824237" y="327.59999389648436">Keep</name>
		</location>
		<location id="id4" x="336.6000061035155" y="250.39999694824218">
			<name x="326.6000061035155" y="216.39999694824218">TurnLeft</name>
		</location>
		<branchpoint id="id5" x="382.4" y="142.59999999999997">
		</branchpoint>
		<init ref="id0"/>
<transition>
			<source ref="id0"/>
			<target ref="id1"/>
		</transition>		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="select">i: int[1,1], j:int[1,1], k:int[1,1]</label>
			<label kind="guard">level == i &amp;&amp; group == j &amp;&amp; !lock</label>
			<label kind="assignment">level = level+1, group = (group-1)*N+k, number=k, lock=true, t=0</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="select">i: int[2,2], j:int[1,1], k:int[1,1]</label>
			<label kind="guard">level == i &amp;&amp; group == j &amp;&amp; !lock</label>
			<label kind="assignment">level = level+1, group = (group-1)*N+k, number=k, lock=true, t=0</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="select">i: int[3,3], j:int[1,1], k:int[1,1]</label>
			<label kind="guard">level == i &amp;&amp; group == j &amp;&amp; !lock</label>
			<label kind="assignment">level = level+1, group = (group-1)*N+k, number=k, lock=true, t=0</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="select">i: int[4,4], j:int[1,1], k:int[1,1]</label>
			<label kind="guard">level == i &amp;&amp; group == j &amp;&amp; !lock</label>
			<label kind="assignment">level = level+1, group = (group-1)*N+k, number=k, lock=true, t=0</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id5"/>
			<label kind="select">i: int[1,1], j:int[1,1], k:int[2,2]</label>
			<label kind="guard">level == i &amp;&amp; group == j &amp;&amp; !lock</label>
			<label kind="assignment">level = level+1, group = (group-1)*N+k, number=k, lock=true, t=0</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="select">i: int[2,2], j:int[2,2], k:int[1,1]</label>
			<label kind="assignment">level = level+1, group = (group-1)*N+k, number=k</label>
			<label kind="probability">1</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id1"/>
			<label kind="select">i: int[2,2], j:int[2,2], k:int[2,2]</label>
			<label kind="assignment">level = level+1, group = (group-1)*N+k, number=k</label>
			<label kind="probability">2</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="select">i: int[1,1], j:int[1,1]</label>
			<label kind="guard">level == i &amp;&amp; group == j &amp;&amp; lock</label>
<label kind="synchronisation">update?</label>			<label kind="assignment">lock=(false), t=t+TIME_STEP</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="select">i: int[2,2], j:int[1,1]</label>
			<label kind="guard">level == i &amp;&amp; group == j &amp;&amp; lock</label>
<label kind="synchronisation">update?</label>			<label kind="assignment">lock=(false), t=t+TIME_STEP</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="select">i: int[3,3], j:int[1,1]</label>
			<label kind="guard">level == i &amp;&amp; group == j &amp;&amp; lock</label>
<label kind="synchronisation">update?</label>			<label kind="assignment">lock=(false), t=t+TIME_STEP</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="select">i: int[4,4], j:int[1,1]</label>
			<label kind="guard">level == i &amp;&amp; group == j &amp;&amp; lock</label>
<label kind="synchronisation">update?</label>			<label kind="assignment">lock=(false), t=t+TIME_STEP</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="select">i: int[5,5], j:int[1,1]</label>
			<label kind="guard">level == i &amp;&amp; group == j &amp;&amp; lock</label>
<label kind="synchronisation">update?</label>			<label kind="assignment">lock=(false), t=t+TIME_STEP</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id4"/>
			<label kind="select">i: int[3,3], j:int[4,4]</label>
			<label kind="guard">level == i &amp;&amp; group == j &amp;&amp; lock</label>
<label kind="synchronisation">update?</label>			<label kind="assignment">lock=(false), t=t+TIME_STEP</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="select">i: int[3,3], j:int[5,5]</label>
			<label kind="guard">level == i &amp;&amp; group == j &amp;&amp; lock</label>
<label kind="synchronisation">update?</label>			<label kind="assignment">lock=(false), t=t+TIME_STEP</label>
		</transition>
	</template>
	<system>
system timer, car1;
	</system>
	<queries>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
	</queries>
</nta>
