<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>typedef struct {
    int speed;
    int a;
    int offset;
}Car;

Car car = {15, 15, 0}; 
int timestep = 10;

clock time;
chan update;
chan end;

void acc(Car&amp; car) {
    int s = car.speed/100 * timestep/100 +  car.a/100 * timestep/100 * timestep/100 * 1/2; // s=vt+1/2at*t
    car.speed += car.a * timestep/100; // v=v+at
    car.offset += s; // offset=offset+s
}</declaration>
	<template>
		<name x="5" y="5">Template</name>
		<declaration>/**
    三元组算法: 由树转化为自动机时，状态迁出时应走行为树对应的边，该算法用于判断相应的边
    (level,group,number)三元组用于标识自动机运行到达的边
    level:  表示边所在行为树的第几层
    group:  表示边所在层的第几棵子树
    number: 表示边所在子树的第几条

    Transition(实线)信息如下(虚线不需要Guard):
    Select -&gt; i:int[1,1], j:int[2,2], k:int[3,3]
    Guard  -&gt; level==i &amp;&amp; group==j
    Update -&gt; group=(group-1)*N+k, level=level+1, number=k
    其中，ijk的值在Java中已读取获得
**/
int level = 1;
int group = 1;
int number = 1;
int N = 3;

/**
    自循环加锁算法: 进入一个Location后，应先"完成行为"再迁出，该算法使用了锁，保证了流程的正确性
    (t, v, lock) 用于判断是否可以迁出
    t: 时间，用于计算是否达到一个行为的持续时间
    v: 速度，用于计算是否达到一个行为的目标速度
    lock: 锁，用于标识是否完成一个行为，完成时释放锁，lock=false；未完成则保留锁，lock=true
    1 迁入:
      Update -&gt; t=0.0, v=0.0, lock=true
    2 自循环:
      Guard  -&gt; t&lt;duration &amp;&amp; v&lt;target_speed &amp;&amp; lock
      Update -&gt; t=t+TIME_STEP, v据算法而定, lock=(duration&gt;=t||v&gt;=target_speed)
    3 迁出:
      Guard  -&gt; !lock
      Update -&gt; t=0.0, v=0.0, lock=true
**/
int v = 0;
int t = 0;
bool lock = true;


</declaration>
		<location id="id0" x="-518" y="8">
			<name x="-528" y="-26">idle</name>
		</location>
		<location id="id1" x="-212" y="8">
			<name x="-222" y="-26">keep</name>
		</location>
		<location id="id2" x="170" y="8">
			<name x="160" y="-26">End</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="-313" y="-110">lock</label>
			<label kind="synchronisation" x="-313" y="-93">update?</label>
			<label kind="assignment" x="-313" y="-76">acc(car), t=t+timestep, lock=(t&lt;50&amp;&amp;v&lt;80)</label>
			<nail x="-331" y="-161"/>
			<nail x="-119" y="-161"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="-194" y="-26">!lock</label>
			<label kind="synchronisation" x="-194" y="-9">end!</label>
			<label kind="assignment" x="-194" y="8">lock=true, t=0</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="assignment" x="-500" y="8">t=0, lock=true</label>
		</transition>
	</template>
	<template>
		<name>timer</name>
		<location id="id3" x="-144" y="-8">
			<name x="-195" y="-25">Start</name>
			<label kind="invariant" x="-154" y="9">time &lt;= 1</label>
		</location>
		<location id="id4" x="144" y="-8">
			<name x="127" y="-42">End</name>
		</location>
		<init ref="id3"/>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-34" y="-34">end?</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="guard" x="-221" y="-187">time == 1</label>
			<label kind="synchronisation" x="-221" y="-161">update!</label>
			<label kind="assignment" x="-221" y="-136">time = 0</label>
			<nail x="-272" y="-161"/>
			<nail x="-51" y="-161"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
Process = Template();
// List one or more processes to be composed into a system.
system Process, timer;
    </system>
	<queries>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
	</queries>
</nta>
