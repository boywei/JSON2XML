/*************************************************************************************** 车辆的查询方法 ************************************************************************************************/

/**
	车的前驱lane
**/
int preLaneIndex(Lane lane){
    return lane.predecessorIndex;
}

/**
  	车的后继lane
**/
int sucLaneIndex(Lane lane){
	return lane.successorIndex;
}

/**
   	车的左侧lane:
   	0. 根据laneId的性质来写: 中心线为0 左边的道路id依次递减 右边的道路id一次递增
   	1. 在同一laneSection中, 若某个laneId1与当前laneId2差为-1, 则该lane为当前左侧lane
**/
int leftLaneIndex(Lane lane){
    int i;
	for(i=0; i&lt;10; i++) {
        int index = laneSections[roads[lane.roadIndex].laneSections[lane.laneSectionIndex]].lanes[i];
        tempLane = lanes[index];
        if(tempLane.laneId - lane.laneId == -1) {
            return index;
        }
    }
    return -1;
}

/**
   	车的右侧lane:
   	0. 同上; 若差值为+1, 则该lane为当前右侧lane
**/
int rightLaneIndex(Lane lane){
    int i;
    for(i=0; i&lt;10; i++) {
        int index = laneSections[roads[lane.roadIndex].laneSections[lane.laneSectionIndex]].lanes[i];
        tempLane = lanes[index];
        if(tempLane.laneId - lane.laneId == -1) {
            return index;
        }
    }
    return -1;
}

/*************************************************************************************** 地图的查询方法 ************************************************************************************************/

/**
   road的前驱类型, 返回elementType
**/
int preRoadType(Road road){
	return road.predecessorElementType;
}

/**
   road的后继类型, 返回elementType
**/
int sucRoadType(Road road){
	return road.successorElementType;
}

/**
   road的前驱, 返回road或者junction的索引
**/
int preRoadIndex(Road road){
    return road.predecessorIndex;
}

/**
   road的后继, 返回road或者junction的索引
**/
int sucRoadIndex(Road road){
	return road.successorIndex;
}

/**
   laneSection的前驱: 可根据lane的前驱计算
**/
int preLaneSectionIndex(LaneSection laneSection){
    return lanes[preLaneIndex(lanes[laneSection.lanes[0]])].laneSectionIndex;
}

/**
   laneSection的后继: 同上
**/
int sucLaneSectionIndex(LaneSection laneSection){
    return lanes[sucLaneIndex(lanes[laneSection.lanes[0]])].laneSectionIndex;
}


/*************************************************************************************** 行为的操作语义 ************************************************************************************************/

/**
    车的一些属性:
    - int roadId            	当前所在road的id
    - int laneSectionId			当前所在laneSection的id
    - int laneId            	当前所在lane的id
    - double offset				车辆在当前lane上的位置
    - double speed             	当前速度大小
    - double accelaration        	当前加速度(包含方向)

    全局的属性:
    - double timestep 			设置的时间步长
    - clock time				时钟
**/


/**
	辅助函数:
	accelerate_s	匀加速直线运动位移公式; 加速度a为负代表减速
	accelerate_v 	匀加速直线运动速度公式
	modifyRoadLane 	运动一段时间后可能改变了road和lane信息, 这时根据偏移修改
**/
double accelerate_s(double v, double a, double t) {
    return v*t + 0.5 * a * t * t;
}

double accelerate_v(double v, double a, double t) {
    return v + a * t;
}

void modifyRoadLane(Car car) {
    // lane, laneSection: 若偏移大于laneSection长度, 即进入了下一lane和laneSection
    double lsLength = laneSectionLengths[laneSections[car.laneSectionIndex].laneSectionLengthIndex];
    double rLength = roadLengths[roads[car.roadIndex].roadLengthIndex];
    if(laneOffsets[car.id] &gt;= lsLength) {
        laneOffsets[car.id] = laneOffsets[car.id] - lsLength;
        laneSections[car.laneSectionIndex] = laneSections[sucLaneSectionIndex(laneSections[car.laneSectionIndex])];
        car.laneIndex = sucLaneIndex(lanes[car.laneIndex]);
    }
    // road: 同理
    if(roadOffsets[car.id] &gt;= rLength) {
        roadOffsets[car.id] = roadOffsets[car.id] - rLength;
        roads[car.roadIndex] = roads[sucRoadIndex(roads[car.roadIndex])];
    }
}

/**
	加速:
	1. 根据加速度公式v'=v+at计算速度: speed += timestep * accelation? 同时需要判断是否到达最大车速
	2. 根据位移公式x=vt+0.5at^2计算移动距离(需根据是否到达最大速度计算): movement = speed * timestep + 0.5 * accelation * timestep * timestep
    3. 判断是否驶出当前车道, 修改road和lane信息并计算偏移: offset += movement?
**/
void speedUp(Car car){
	double v1 = speeds[car.id];
    double a = accelerations[car.id];
    double v2 = accelerate_v(v1, a, TIME_STEP);
    double t = 0.0;
    double movement = 0.0;
    double maxSpeed = roadMaxSpeeds[roads[car.roadIndex].maxSpeedIndex];
    if(v2 &gt; maxSpeed) { //在时间段之前已经到达最大速度了, 后面保持匀速
		v2 = maxSpeed;
        t = (v2 - v1) / a; //加速时间
        movement = accelerate_s(v1, a, t) + v2 * (TIME_STEP - t);
    } else {
        movement = accelerate_s(v1, a, TIME_STEP);
    }
    speeds[car.speedIndex] = v2;
    roadOffsets[car.roadOffsetIndex] = roadOffsets[car.roadOffsetIndex] + movement;
    laneOffsets[car.laneOffsetIndex] = laneOffsets[car.laneOffsetIndex] + movement;
    modifyRoadLane(car);
}


/**
	减速:
    0. 与加速逻辑同理, 此时acclation大小为负
    1. 无需考虑是否到达最大速度, 应考虑速度是否变为0
**/
void speedDown(Car car){
    double v1 = speeds[car.id];
    double a = accelerations[car.id];
    double v2 = accelerate_v(v1, a, TIME_STEP);
    double t = 0.0;
    double movement = 0.0;
    double minSpeed = 0.0;
    if(v2 &lt; minSpeed) { //在时间段之前已经到达最大速度了, 后面保持匀速
		v2 = minSpeed;
        t = (v2 - v1) / a; //加速时间
        movement = accelerate_s(v1, a, t) + v2 * (TIME_STEP - t);
    } else {
        movement = accelerate_s(v1, a, TIME_STEP);
    }
    speeds[car.speedIndex] = v2;
    roadOffsets[car.roadOffsetIndex] = roadOffsets[car.roadOffsetIndex] + movement;
    laneOffsets[car.laneOffsetIndex] = laneOffsets[car.laneOffsetIndex] + movement;
    modifyRoadLane(car);
}

/**
	匀速:
    0. 可看作加速度为0的加速运动, 逻辑同上
    1. 无需考虑速度是否为0或达到最大, 只需考虑是否驶出当前lane和road
**/
void keep(Car car){
    double v = speeds[car.id];
    double movement = v * TIME_STEP;
    roadOffsets[car.roadOffsetIndex] = roadOffsets[car.roadOffsetIndex] + movement;
    laneOffsets[car.laneOffsetIndex] = laneOffsets[car.laneOffsetIndex] + movement;
    modifyRoadLane(car);
}

/**
    转到左车道:
    0. 可视为一个瞬时动作
    1. speed不变, road不变, lane变为其左侧lane; 若无?
    2. 设置一个因子k, 因为左转也会前进一部分, k代表左转道前进的路程占直接匀速前进路程的比例
    3. 若无法左转该?
**/
void changeToLeftLane(Car car){
    double k = 0.8;
    double v = speeds[car.id];
    double movement = v * TIME_STEP * k;
    roadOffsets[car.roadOffsetIndex] = roadOffsets[car.roadOffsetIndex] + movement;
    laneOffsets[car.laneOffsetIndex] = laneOffsets[car.laneOffsetIndex] + movement;
    if(lanes[car.laneIndex].laneChange == 1 || lanes[car.laneIndex].laneChange == 3) {
     	car.laneIndex = leftLaneIndex(lanes[car.laneIndex]);
    }
    modifyRoadLane(car);
}



/**
    转到右车道:
    0. 逻辑同上转到左车道
**/
void changeToRightLane(Car car){
    double k = 0.8;
    double v = speeds[car.id];
    double movement = v * TIME_STEP * k;
    roadOffsets[car.roadOffsetIndex] = roadOffsets[car.roadOffsetIndex] + movement;
    laneOffsets[car.laneOffsetIndex] = laneOffsets[car.laneOffsetIndex] + movement;
    if(lanes[car.laneIndex].laneChange == 2 || lanes[car.laneIndex].laneChange == 3) {
     	car.laneIndex = rightLaneIndex(lanes[car.laneIndex]);
    }
    modifyRoadLane(car);
}

/**
    左转:
    0. 视为一个瞬时动作
    1. speed不变, road和lane都变为左转后的; 若无?
**/
void turnLeft(){
    // 存疑, 暂未实现
}

/**
   右转:
   0. 逻辑同上左转
**/
void turnRight(){
    // 存疑, 暂未实现
}

/*************************************************************************************** 常用函数 ************************************************************************************************/

/**
   	获取两车的距离差:
   	两车在同一road比才有意义, 否则直接距离差视为无穷大
**/
double getDistance(Car car1, Car car2){
    double distance = roadOffsets[car1.id] - roadOffsets[car2.id];
	if(car1.roadIndex == car2.roadIndex) {
         if(distance &lt; 0) {
             return -1 * distance;
         } else {
             return distance;
         }
    } else {
        return 9999999.9;
    }
}
